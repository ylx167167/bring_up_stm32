/* USER CODE BEGIN Header */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

#include "adc.h"
#include "can.h"
#include "cmsis_os.h"
#include "dma.h"
#include "gpio.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "BwFilter.h"
#include "custom/adc_vcc.h"
#include "custom/can_diy.h"
#include "custom/lm75.h"
#include "custom/mpu6500.h"
#include "custom/syscall.h"
#include "filter.h"
#include "stdio.h"
#include "stdlib.h"

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
static uint16_t temp = 0;
static uint16_t thyst = 0;
static uint16_t tos = 0;
static uint8_t temp_flag = FALSE;
static uint8_t thyst_flag = FALSE;
static uint8_t tos_flag = FALSE;
uint16_t temp;
uint16_t thyst;
uint16_t tos;
uint8_t temp_flag;
uint8_t thyst_flag;
uint8_t tos_flag;
uint16_t te = 0;
float adc_vcc;

CAN_TxHeaderTypeDef Can_Tx;
CAN_RxHeaderTypeDef Can_Rx;
uint8_t Rxdata[8];                             // can的接收
uint8_t Txdata[8] = {0};                       // can的发送
uint8_t SendMsg[8] = {6, 6, 6, 6, 6, 6, 6, 6}; //
CANTxMsg_t TxMsg;                              //
extern uint8_t can_rx_finish_flag;
double gDoulbeSetScale[2] = {0.000000000098458979119984636, 0.0000098126110186609252}; // double最大的长度
double result = 0;
// RetargetInit(&huart1);

/* USER CODE END PFP */

/* Private user code
   ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fputc(int ch, FILE *f)
{
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
    return ch;
}
uint16_t pwm = 0;
/*****************************************************
 *function: 读字符文件函
 *param1: 文件指针
 *return: 读取字符
 ******************************************************/
int fgetc(FILE *f)
{
    uint8_t ch = 0;
    HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 10);
    return (int)ch;
}
uint8_t TxData[8] = {0};
uint8_t length = 0x00;
int16_t sin_1, sin_2, sin_3, sin_4, sin_5, sin_6, sin_all; // 6hz 低通成3
float AmpInput = 2;
float AmpOutput = 0;
float fillterOutput = 0;
double fillterOutputDouble = 0;

uint32_t gt_sincos_divide;
int waveflag1 = 0;
int waveflag2 = 0;
double lowpass_1hz_IIRCoeffs_I[6 * 2] = {1, 2, 1, 1, -1.9952772372946446, 0.99531479853184868,
                                         1, 2, 1, 1, -1.9886888350211553, 0.98872627223121401};
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick.
     */
    HAL_Init();

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_DMA_Init();
    MX_I2C1_Init();
    MX_ADC1_Init();
    MX_TIM2_Init();
    MX_TIM3_Init();
    MX_CAN_Init();
    MX_USART1_UART_Init();
    /* USER CODE BEGIN 2 */
    // HAL_TIM_Base_Start_IT(&htim2); //
    // HAL_TIM_Base_Start_IT(&htim3); //
    // LM75B_Init(0x00); //
    // MPU6500_Init();   //
    // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

    /* can*/
    Can_User_Init();

    result = gDoulbeSetScale[0] * gDoulbeSetScale[1];
#if 0
  int16_t sin, cos, sin2_theta;
  temp = 0;
  thyst = 0;
  tos = 0;
  temp_flag = FALSE;
  thyst_flag = FALSE;
  tos_flag = FALSE;
  adc_vcc = 0;
  TxData[7] = 0x1a;  //
  TxData[6] = 0x1b;
  TxData[5] = 0x1c;
  TxData[4] = 0x1d;
  TxData[3] = 0x1e;
  TxData[2] = 0x1f;
  TxData[1] = 0x10;
  TxData[0] = 0x11;
  length = 0x08;  //
#endif

    //  RetargetInit(&huart1);
    volatile int len = sizeof(lowpass_1hz_IIRCoeffs_I) / sizeof(lowpass_1hz_IIRCoeffs_I[0]);
    while (1)
    {
        len = sizeof(lowpass_1hz_IIRCoeffs_I) / sizeof(lowpass_1hz_IIRCoeffs_I[0]);
#if 0
    for (;;) {
      waveflag1 = 0;
      waveflag2 = 0;
      delay_ms_soft(500);
      waveflag1 = 1;
      waveflag2 = 1;
      delay_ms_soft(500);
      /* code */
    }
#endif
#if 0 // 生成单个wave
    Test_SinCos_By_delay(gt_sincos, gt_sincos_divide);  //
    sin = gt_sincos->sin;
    cos = gt_sincos->cos;
    // sin2_theta = (2 * sin * cos) & (0x000003ff);
    sin2_theta = Formula_DSin(gt_sincos_divide);
    delay_ms_soft(1);  // 1hz 也就是 1000/1024
    gt_sincos_divide++;
#endif
#if 1
        // Test_Generate_MultiFreqWave(gt_sinmultifreqwave, 6, gt_sincos_divide); //

        // sin_1 = gt_sinmultifreqwave->sin_1h;
        // sin_2 = gt_sinmultifreqwave->sin_2h;
        // sin_3 = gt_sinmultifreqwave->sin_3h;
        // sin_4 = gt_sinmultifreqwave->sin_4h;
        // sin_5 = gt_sinmultifreqwave->sin_5h;
        // sin_6 = gt_sinmultifreqwave->sin_6h;
        // sin_all = sin_1 + sin_2 + sin_3 + sin_4 + sin_5 + sin_6;
        // gt_sincos_divide++;
        // AmpOutput = Test_Generate_Wave_ByAmP(AmpInput, sin_all);
        // fillterOutput = butterWorth2Order(AmpOutput);
        // fillterOutputDouble = butterWorth2Orderdouble(AmpOutput);
        Exp_BwFilter_Lowpass_1HZ();
#endif

#if 0
    // 反复发送can信息
    sendOrder(0x123, 0x13550151, 0x00000004U, 0, 3, TxData);
    Set_GPIO_Bit(4, 0);
    delay_ms_soft(50);
    Set_GPIO_Bit(4, 0);
    delay_ms_soft(50);
    te++;
    /*! lm75*/
    // temp_flag = LM75B_Read_Temp(&temp);
    // delay_ms_soft(100);
    // thyst_flag = LM75B_Read_THYST(&thyst);
    // delay_ms_soft(100);
    // tos_flag = LM75B_Read_TOS(&tos);
    // delay_ms_soft(100);
    // adc_vcc = adc_get_vcc();
    // Led_Ctrl(LED_UP_C13);
#endif
#if 0
//  uart ??
    char cmd;
    scanf("%c", &cmd);
    if (cmd == 'C' || cmd == 'c')
    {
      cmd = 0;
      printf("\r\nHello World.");
    }
#endif
#if 0
    // pwm??
    while (pwm < 500)
    {
      pwm++;
      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm);
      delay_ms_soft(2);
    }
    while (pwm)
    {
      pwm--;
      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm);
      delay_ms_soft(2);
    }
#endif

        // if (CAN_TX_Message(TxData, length) == 1) //can
        // {
        //   Error_Handler();
        //   printf("rror_\r\n");
        // }
        // if (can_rx_finish_flag == 1)
        // {
        //   can_rx_finish_flag = 0;
        //   printf("recevie\r\n");
        // }

        //  //
        //  delay_ms_soft(200);
        //  // Set_GPIO_Bit(4, 1);
        //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
        //  delay_ms_soft(200);
        //  // Set_GPIO_Bit(4, 0);
        //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
    }

    /* USER CODE END 2 */

    /* Call init function for freertos objects (in freertos.c) */
    MX_FREERTOS_Init();
    /* Start scheduler */
    osKernelStart();

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
    {
        Error_Handler();
    }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
    /* USER CODE BEGIN 6 */
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
